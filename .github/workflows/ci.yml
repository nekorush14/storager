name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run Vitest
        run: |
          cd frontend
          npm run test:run

  backend-lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: backend
          bundler-cache: true
          
      - name: Run RuboCop
        run: |
          cd backend
          bundle exec rubocop

  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/storager_test
      RAILS_ENV: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: backend
          bundler-cache: true
          
      - name: Setup database
        run: |
          cd backend
          bundle exec rails db:create
          bundle exec rails db:migrate
          
      - name: Run RSpec
        run: |
          cd backend
          bundle exec rspec

  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test, backend-lint, backend-test]
    
    permissions:
      contents: read
      packages: write
      pull-requests: write
    
    steps:
      - name: Comment Docker instructions on PR
        id: comment-docker-instructions-on-pr
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🐳 Docker Image Local Testing Instructions

            To test this PR's changes locally, please run the following commands:

            ### 1. Clone and checkout the repository
            \`\`\`bash
            git fetch origin
            git checkout ${{ github.head_ref }}
            \`\`\`

            ### 2. Build Docker images
            \`\`\`bash
            # Build frontend image
            docker build -t storager-frontend:pr-test ./frontend

            # Build backend image
            docker build -t storager-backend:pr-test ./backend
            \`\`\`

            ### 3. Start services with Docker Compose
            \`\`\`bash
            # Create environment file
            cp .env.example .env

            # Start all services
            docker-compose up
            \`\`\`

            ### 4. Access endpoints
            - Frontend: http://localhost:5173
            - Backend API: http://localhost:3000
            - Database: localhost:5432`;
            
            const response = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // Save comment ID for later editing
            core.setOutput('comment-id', response.data.id);
      
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and test frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: build
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Update PR comment with success message
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = '${{ steps.comment-docker-instructions-on-pr.outputs.comment-id }}';
            
            const originalComment = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId
            });
            
            const updatedComment = originalComment.data.body + `

            ---
            ✅ **CI build tests completed successfully.** Images are not pushed to production registry for PRs.`;
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: updatedComment
            });
          
  docker-compose-test:
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test, backend-lint, backend-test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create .env file
        run: |
          cp .env.example .env
          echo "RAILS_MASTER_KEY=placeholder_key_for_ci_testing" >> .env
          
      - name: Validate docker-compose configuration
        run: docker compose config
        
      - name: Test docker-compose services startup
        run: |
          docker compose up -d db
          sleep 10
          docker compose ps
          docker compose down